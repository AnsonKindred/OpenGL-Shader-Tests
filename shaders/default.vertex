uniform mat3 projection;
attribute vec3 vertex;

uniform samplerBuffer positionSampler;
uniform int batchIndex;
uniform int batchSize;

attribute vec4 vertex_color;
varying vec4 color;

float positionFetch(int index)
{
	int item_index = int(index/4);
	int component_index = index%4;
    float value = texelFetch(positionSampler, item_index)[component_index];
    return value;
}

void main(void)  
{ 
	color = vertex_color;  
	vec3 real_position = vec3(vertex.x + positionFetch((batchIndex*batchSize + int(vertex.z))*2), vertex.y + positionFetch((batchIndex*batchSize + int(vertex.z))*2+1), 1); 
	gl_Position = vec4(projection * real_position, 1); 
}