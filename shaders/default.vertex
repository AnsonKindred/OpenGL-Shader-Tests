uniform mat3 projection;
attribute vec3 vertex;

uniform samplerBuffer positionSampler;
uniform int batchIndex;
uniform int batchSize;

attribute vec4 vertex_color;
varying vec4 color;

float positionFetch(int index)
{
	int real_index = index / 4;
	int component = index % 4;
    float value = texelFetch(positionSampler, real_index)[component];
    
    return value;
}

void main(void)  
{ 
	color = vec4(1, 1, 1, 1);  
	vec3 real_position = vec3(vertex.x + positionFetch((0 + int(vertex.z))*2), vertex.y + positionFetch((0 + int(vertex.z))*2+1), 1); 
	gl_Position = vec4(projection * real_position, 1); 
}